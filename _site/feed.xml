<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Заметка: Первое впечатление о reselect для redux</title>
        <description>&lt;p&gt;Всем привет, меня зовут &lt;a href=&quot;https://twitter.com/pvpshoot&quot;&gt;Миша&lt;/a&gt;, и автор этого блога сподвиг меня написать сюда заметку, которой я поделился в нашем фронтенд чатике слака.
Речь пойдет о библиотеке &lt;a href=&quot;https://github.com/reactjs/reselect&quot;&gt;Reselect&lt;/a&gt; для &lt;a href=&quot;https://github.com/reactjs/redux&quot;&gt;Redux&lt;/a&gt;.
Если вы уже используете в работе recompose то смело закрывайте статью, и читайте новости поинтереснее этой.
Всех остальных призываю к прочтению&lt;/p&gt;

&lt;p&gt;Итак если вы наверняка часто видели подобную конструкицию в ваших компонентах и она успела приесться:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const mapStateToProps = state =&amp;gt; ({
    couponsList: state.couponsReducer.couponsList,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Все что я сделал, это передал массив купонов из редакс стора в пропсы коспонента.
Раньше я ограничивался подобным, и всю логику по дальнейшиму разруливанию я делал внутри компонента.
В этом кейсе мне нужно было отфильтровать только валидные купоны, и посчитать общуюю сумму дискаунта.&lt;/p&gt;

&lt;p&gt;Товарищ по работе намекнул на реселект, и я решил попробовать.
Итак я преступил к работе, для начала я вынес получение массива куппонов в отдельную функцию&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const couponsSelector = state =&amp;gt; state.couponsReducer.couponsList
const mapStateToProps = state =&amp;gt; ({
    couponsList: couponsSelector(state),
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Пока изменений мало но мысль заложена хорошая, у нас есть чистая функция, которая получает стейт идостает из него наш массив.
Эту функцию мы можем вынести в отдельный файл, в папочке selectors рядом с нашим редьюсерами и импортить их в любом нужном нам компоненте.
Но соглаитесь, пока все это оверхед&lt;/p&gt;

&lt;p&gt;Итак продолжаем, обратимся к reselect для фильтрации только валидных куппонов:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const couponsSelector = state =&amp;gt; state.couponsReducer.couponsList
const validCouponsListSelector = createSelector(
    couponsSelector,
    arr =&amp;gt; validateCoupons(arr),
)
const mapStateToProps = state =&amp;gt; ({
    couponsList: couponsSelector(state),
    validCouponsList: validCouponsListSelector(state),
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Опа, что это мы сейчас сделали?
А мы добавили новый селектор, который в качесве 1 аргумента получает другой селектор, а последним функцию обработчик.
Вот пример из док:
    const taxSelector = createSelector(
        subtotalSelector,
        taxPercentSelector,
        (subtotal, taxPercent) =&amp;gt; subtotal * (taxPercent / 100)
    )&lt;/p&gt;

&lt;p&gt;Сечете? мы передали в функцию &lt;code class=&quot;highlighter-rouge&quot;&gt;createSelector&lt;/code&gt; два наших селектора, а вконце получили их значение в функции обработчике&lt;/p&gt;

&lt;p&gt;Итак уже есть пару селекторов для моего компонента, но нужно больше, мне нужно получить полную скидку, вперед:
    const totalDiscountSelector = createSelector(
        validCouponsListSelector,
        coupons =&amp;gt; calculateSumm(coupons),
    )
    const mapStateToProps = state =&amp;gt; ({
        couponsList: couponsSelector(state),
        validCouponsList: validCouponsListSelector(state),
        totalDiscount: totalDiscountSelector(state),
    })&lt;/p&gt;

&lt;p&gt;Нам не пришлось сохранять промежуточное значение &lt;code class=&quot;highlighter-rouge&quot;&gt;validCouponsList&lt;/code&gt; для дальнейшего использования, а ведь и оно тоже нам пригодится
Этих селекторов может быть куча, так я расширил свое приложение следующим образом:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const limitedDiscountSelector = createSelector(
    totalDiscountSelector,
    discountTypeSelector,
    discountLimiter,
    (total, discType, limiter) =&amp;gt; pleaseLimitMydiscount(total, discType, limiter)
);
const mapStateToProps = state =&amp;gt; ({
    couponsList: couponsSelector(state),
    validCouponsList: validCouponsListSelector(state),
    discountType: discountTypeSelector(state),
    discountLimiter: discountLimiterSelector(state),
    totalDiscount: totalDiscountSelector(state),
    limitedDiscount: limitedDiscountSelector(state), 
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Пользователь может захотеть задать максимальную допустимую скидку для купонов, а они ведь могут быть разных видов, одни процентные скидки, другие денежные. 
По дефлоту реселект позволяет кешировать данные, и делет их проверку внутри себя, но вы вольны сделать свою собственную мемоизацию.
Я вынес все селеторы в отельный модуль, для удобного хранения и доступа из других компонентов.
Освободил компонент от лишнего кода, что облегчело понимание что же он должен делать, а не как.
Спасибо за чтение.
Рекомендую рекомпоз к ознакомлениею и дальнейшему использованию!
Пишите мне в &lt;a href=&quot;https://twitter.com/pvpshoot&quot;&gt;twitter&lt;/a&gt; если хотите подискутировать на эту тему&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/zametka-pervoe-vpechatlenie-o-recompose-dlya-redux-html</link>
        <guid isPermaLink="true">http://localhost:4000/zametka-pervoe-vpechatlenie-o-recompose-dlya-redux-html</guid>
      </item>
    
      <item>
        <title>Создание Alix, Chrome-расширения для линтинга HTML</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Ire Aderinokun &lt;a href=&quot;https://bitsofco.de/making-alix-a-chrome-extension-for-linting-html/&quot;&gt;Making Alix, a Chrome Extension for Linting HTML&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;На прошлой неделе я написала о том, как вы можете &lt;a href=&quot;https://bitsofco.de/linting-html-using-css/&quot;&gt;использовать CSS селекторы для линтинга HTML&lt;/a&gt;. Идея этой концепции заключалась в том, что мы можем использовать некоторые продвинутые селекторы, такие как &lt;code class=&quot;highlighter-rouge&quot;&gt;:not()&lt;/code&gt; чтобы выбрать определенные типы элементов на странице. Например, мы можем выбрать все изображения, у которых нет альтернативного текста, и применить к ним стиль, чтобы выделить их на странице.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;img:not([alt]) {  
    border: 5px solid red;
}

/* Add an error message */
img:not([alt])::after {  
   content: &quot;Images must have an alt attribute&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;После написания этой статьи я обнаружила, что &lt;a href=&quot;http://heydonworks.com/revenge_css_bookmarklet/&quot;&gt;множество&lt;/a&gt; &lt;a href=&quot;http://disq.us/url?url=http://archive.oreilly.com/pub/a/network/2000/07/21/magazine/css_tool.html:q4ix0_OUH1ABT47phcu1age-5Tw&amp;amp;cuid=3490249&quot;&gt;других&lt;/a&gt; &lt;a href=&quot;https://disq.us/url?url=https://mathiasbynens.be/notes/css-hidden-elements:icJwuKHh3fzutZrF7QzsaC0z6Zg&amp;amp;cuid=3490249&quot;&gt;людей&lt;/a&gt; уже использовали эту идею. Лучшим решением среди найденных, оказался &lt;a href=&quot;http://ffoodd.github.io/a11y.css/&quot;&gt;a11y.css&lt;/a&gt; созданный &lt;a href=&quot;https://twitter.com/ffoodd_fr&quot;&gt; Gaël Poupard&lt;/a&gt;. Поэтому я решила воспользоваться его наработками.&lt;/p&gt;

&lt;p&gt;Чтобы всем было удобно пользоваться я решила сделать расширение для браузера (Chrome).&lt;/p&gt;

&lt;video autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; poster=&quot;http://res.cloudinary.com/ireaderinokun/image/upload/v1488961489/demo-chrome_cuswu1.jpg&quot; width=&quot;780&quot;&gt;  
    &lt;source type=&quot;video/webm&quot; src=&quot;http://res.cloudinary.com/ireaderinokun/image/upload/v1488961489/demo-chrome_cuswu1.webm&quot; /&gt;
    &lt;img src=&quot;http://res.cloudinary.com/ireaderinokun/image/upload/v1488961489/demo-chrome_cuswu1.jpg&quot; /&gt;
&lt;/video&gt;

&lt;p&gt;При помощи расширения легко применить таблицу стилей к любой странице. Вот как я это сделала.&lt;/p&gt;

&lt;p&gt;###Объявление расширения Chrome: Манифест&lt;/p&gt;

&lt;p&gt;Первое, что нам нужно сделать, при создании расширения для Chrome — создать манифест-файл. Работает это так же как в случае когда мы создаем манифест-файл для прогрессивного веб приложения (PWA прим. переводчика). Файл включает в себя различную информацию, по которой Chrome определяет, что должно делать расширение и какие разрешения ему для этого необходимы.&lt;/p&gt;

&lt;p&gt;Это файл &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; для Alix —&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;manifest_version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alix for Chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;short_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Lorem ipsum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;permissions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;activeTab&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;browser_action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;default_title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Toggle Alix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;default_popup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;popup/index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;default_icon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;19&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images/toolbar-chrome.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;38&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;images/toolbar-chrome@2x.png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;icons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;128&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;icon_128.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;icon_16.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;48&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;icon_48.png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;web_accessible_resources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-en_advice.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-en_error.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-en_obsolete.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-en_warning.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-fr_advice.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-fr_error.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-fr_obsolete.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a11y.css/a11y-fr_warning.css&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Давайте разберемся, что обозначают некоторые опции —&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;manifest_version&lt;/code&gt;:   версия формата файла манифеста, требуемого расширением. Для Chrome 18 требуется версия 2.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;permissions&lt;/code&gt;: разрешения, которые запрашивает ваше расширение. Alix требует только доступ к той вкладке, которая активна в данный момент.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;browser_action&lt;/code&gt; помещает иконку на главную панель Chrome и определяет действие при клике по значку.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default_title&lt;/code&gt;: тайтл для значка на панели
&lt;code class=&quot;highlighter-rouge&quot;&gt;default_popup&lt;/code&gt;: html страница, которая отобразится при клике на значок.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;web_accessible_resources&lt;/code&gt;:  массив путей к ресурсам, которые могут использоваться на странице.&lt;/p&gt;

&lt;p&gt;##Создание всплывающего окна&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bitsofco.de/content/images/2017/03/Screen-Shot-2017-03-08-at-09.32.02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Всплывающее окно это просто html страница, указанная в манифест-файле в &lt;code class=&quot;highlighter-rouge&quot;&gt;browser_action/default_popup&lt;/code&gt;. Эта страница, по умолчанию, будет запускаться при клике на значок.&lt;/p&gt;

&lt;p&gt;С этой страницей мы можем делать все, что захотим, как с обычной html страницей.&lt;/p&gt;

&lt;p&gt;##Добавляем таблицу стилей a11y.css&lt;/p&gt;

&lt;p&gt;Наконец, нам нужно применить к текущей активной вкладке таблицу стилей &lt;code class=&quot;highlighter-rouge&quot;&gt;a11y.css&lt;/code&gt;. Для этого должен быть запущен скрипт, который создаст на странице элемент &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link rel=&quot;stylsheet&quot;&amp;gt;&lt;/code&gt; указывающий на необходимую таблицу стилей.&lt;/p&gt;

&lt;p&gt;Для выполнения скрипта мы воспользуемся методом &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome.tabs.executeScript()&lt;/code&gt;. ​Этот метод принимает объект с несколькими параметрами. В нашем случае параметром выступит константа со строкой, содержащей код, который мы хотим выполнить.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addStylesheet() {

    // Get file path based on language and level options from form
    const file = `/a11y.css/a11y-${options.language}_${options.level}.css`;

    const code = `
        var stylesheet = document.createElement(&quot;link&quot;);
        stylesheet.rel = &quot;stylesheet&quot;;
        stylesheet.href = chrome.extension.getURL(&quot;${file}&quot;);
        stylesheet.id = &quot;a11yCSS&quot;;
        document.getElementsByTagName(&quot;head&quot;)[0].appendChild(stylesheet);
    `;

    // Execute script on active tab
    chrome.tabs.executeScript({code: code});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Если мы откроем инспектор элементов, то увидим, что таблица стилей добавлена как последний элемент в секции head.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bitsofco.de/content/images/2017/03/Screen-Shot-2017-03-08-at-09.35.23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;То что нужно! Как всегда, вы можете посмотреть &lt;a href=&quot;https://github.com/ireade/alix&quot;&gt;исходный код&lt;/a&gt; или установить расширение из &lt;a href=&quot;https://chrome.google.com/webstore/detail/alix-for-chrome/aepmadgjacfjcneccddiccnkbpimobge&quot;&gt;магазина Chrome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Спасибо &lt;a href=&quot;https://twitter.com/ffoodd_fr&quot;&gt;Gaël Poupard&lt;/a&gt; за созданный им &lt;a href=&quot;http://ffoodd.github.io/a11y.css/&quot;&gt;a11y.css&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/making-alix-a-chrome-extension-for-linting-html</link>
        <guid isPermaLink="true">http://localhost:4000/making-alix-a-chrome-extension-for-linting-html</guid>
      </item>
    
      <item>
        <title>Линтинг HTML с помощью CSS</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Ire Aderinokun &lt;a href=&quot;https://bitsofco.de/linting-html-using-css/&quot;&gt;Linting HTML using CSS&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Когда HTML написан не правильно, то ничего особенного не происходит. Однако, в таком случае на сайте могут появиться блоки, которые не семантичны или недоступны для пользователя.&lt;/p&gt;

&lt;p&gt;Существует множество способов проверки HTML для обнаружения и устранения проблем. К примеру, можно воспользоваться &lt;a href=&quot;https://validator.w3.org/&quot;&gt;валидатором W3C&lt;/a&gt;. Но есть еще одна вещь которую мы с легкостью можем интегрировать в процесс разработки — использовать некоторые усовершенствованные CSS селекторы для выделения потенциально проблемных областей. Ниже мы рассмотрим несколько примеров, которые помогут нам в этом.&lt;/p&gt;

&lt;p&gt;##Встроенные стили&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
*[style] { 
  border: 5px solid red; /* Стиль для выделения элементов */
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Этот селектор применится к элементам страницы, в которых используются встроенные (инлайновые) стили. Их использования стоит избегать, так как инлайновые стили трудно переопределить из-за повышенного уровня специфичности. Хотя есть случаи, когда встроенные стили необходимы, но они тоже будут выделены нашим селектором. Поэтому решение о необходимости использования инлайновых стилей принимается в каждом конкретном случае.&lt;/p&gt;

&lt;p&gt;Выбрав проблемные элементы, мы можем применить к ним оформление, чтобы сделать их заметными на странице, например, добавить красную рамку.&lt;/p&gt;

&lt;p&gt;##Неисправные или отсутствующие ссылки&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
a:not([href])  
a[href=&quot;#&quot;],  
a[href=&quot;&quot;],  
a[href*=&quot;javascript:void(0)&quot;] { … }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Эти селекторы выделяют ссылки, которые либо не содержат атрибута &lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt;, либо он не несет смысла.&lt;/p&gt;

&lt;p&gt;##Недоступные изображения&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
img:not([alt]) { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Как правило, &lt;a href=&quot;https://bitsofco.de/alternative-text-and-images/&quot;&gt;изображения должны иметь атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt;&lt;/a&gt;. Когда же он отсутствует, большинство скринридеров считывает вместо него значение атрибута &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;, которое бесполезно для пользователя и может ввести его в заблуждение.&lt;/p&gt;

&lt;p&gt;Описанный селектор не будет выбирать изображения с пустым атрибутом, т.е.изображения с &lt;code class=&quot;highlighter-rouge&quot;&gt;alt=&quot;&quot;&lt;/code&gt;. Это связано с тем, что пустой атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; может быть преднамеренным способом пропустить считывание скринридером, что полезно, например, если изображение используется в декоративных целях. Тем не менее было бы полезно, если бы такие теги выделялись. Сделать это мы можем следующим селектором —&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;img[alt=&quot;&quot;] { ... }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##Отсутствие языка документа&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
html:not([lang]),
html[lang=&quot;&quot;] { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Важным атрибутом, который должен присутствовать во всех элементах &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; является атрибут языка. Этот атрибут помогает определить скринридерам язык страницы.&lt;/p&gt;

&lt;p&gt;Вот пример того, что произойдет, если  будет отсутствовать атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;lang&lt;/code&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ru&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Share &lt;a href=&quot;https://twitter.com/HTeuMeuLeu&quot;&gt;@HTeuMeuLeu&lt;/a&gt;&amp;#39;s video to show why setting a default language (eg. lang=&amp;quot;en&amp;quot;) is important. 😂 &lt;a href=&quot;https://t.co/tjn8GvPVKM&quot;&gt;https://t.co/tjn8GvPVKM&lt;/a&gt;&lt;/p&gt;&amp;mdash; overflow: heydon (@heydonworks) &lt;a href=&quot;https://twitter.com/heydonworks/status/834714116715663361&quot;&gt;23 февраля 2017 г.&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;##Неправильная кодировка&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
meta[charset]:not([charset=&quot;UTF-8&quot;]) { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Этот селектор предназначен для мета-тега, кодировка которого установлена не в &lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;. Этот тег говорит браузеру о том, что нужно использовать кодировку &lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;, которая в настоящее время является рекомендуемой для html документов.&lt;/p&gt;

&lt;p&gt;Использование этого тега &lt;a href=&quot;http://validator.w3.org/docs/help.html#faq-charset&quot;&gt;необходимо для валидного html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В идеале, этот тег должен идти первым, после открывающего &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;. Мы можем проверить это, используя следующий селектор —&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
meta[charset=&quot;UTF-8&quot;]:not(:first-child) { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;##Недопустимые атрибуты Viewport&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
meta[name=&quot;viewport&quot;][content*=&quot;user-scalable=no&quot;],
meta[name=&quot;viewport&quot;][content*=&quot;maximum-scale&quot;],
meta[name=&quot;viewport&quot;][content*=&quot;minimum-scale&quot;] { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Этот селектор необходимо использовать для выделения недопустимых значений viewport. Как правило, рекомендуется избегать ограничения возможности пользователю манипулировать областью просмотра, масштабируя ее.  Таким образом выражения &lt;code class=&quot;highlighter-rouge&quot;&gt;user-scalable=no&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;maximum-scale&lt;/code&gt; или &lt;code class=&quot;highlighter-rouge&quot;&gt;minimum-scale&lt;/code&gt; никогда не должны использоваться.&lt;/p&gt;

&lt;p&gt;##Немаркированные элементы формы&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
input:not([id]),  
select:not([id]),  
textarea:not([id]) { ... }

label:not([for]) { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Элементы формы, пожалуй, являются самыми важными тегами, когда дело доходит до маркировки. Хотя и существует &lt;a href=&quot;https://bitsofco.de/labelling-form-elements/&quot;&gt;несколько способов маркировки&lt;/a&gt;, наиболее распространенным способом является использование id, на который ссылается label. Данный селектор проверяет элементы форм, которые не имеют id и элементы label, которые не связаны явно с элементом формы при помощи атрибута &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Другой тип маркировки, который важен для элементов формы — это атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;. Хотя атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; используется для маркировки элемента в контексте документа. Атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; используется в качестве ссылки на элемент при отправке данных формой.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
input:not([name]),
select:not([name]),
textarea:not([name]) { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Кроме того, помимо самих элементов формы, полезно присваивать тегу формы имя и/или идентификатор.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
`form:not([name]):not([id]) { ...` }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Этот селектор выделяет теги form, у которых отсутствуют оба атрибута — &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;##Пустые интерактивные элементы&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
button:empty,
a:empty { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Интерактивные элементы, такие как ссылки или кнопки, обычно размечаются их контентом. Хотя эти элементы можно размечать с помощью других методов, таких как атрибут &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-label&lt;/code&gt;, ситуация, когда теги не содержат контента, скорее всего признак чего-то неправильного. Этот селектор выделяет любые ссылки и кнопки без содержимого.&lt;/p&gt;

&lt;p&gt;##Необязательные или устаревшие атрибуты&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
script[type=&quot;text/javascript&quot;],
link[rel=&quot;stylesheet&quot;][type=&quot;text/css&quot;] { ... }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Наконец, мы можем использовать селектор, чтобы выделить элементы с атрибутами которые устарели или не являются обязательными.&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/linting-html-using-css</link>
        <guid isPermaLink="true">http://localhost:4000/linting-html-using-css</guid>
      </item>
    
      <item>
        <title>Почему нет никакого CSS4? Разбираемся с CSS Levels</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Rachel Andrew &lt;a href=&quot;https://www.rachelandrew.co.uk/archives/2016/09/13/why-there-is-no-css4-explaining-css-levels/&quot;&gt;Why there is no CSS4 - explaining CSS Levels&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;У нас были CSS1 и CSS2. У нас даже был CSS 2.1, который сразу перешёл в CSS3. Или это мы перешли? Этот пост — краткое объяснение того, как CSS версионируется сегодня.&lt;/p&gt;

&lt;p&gt;CSS версий 1 и 2 были монолитными спецификациями. Все, что касалось CSS было включено в один большой документ. Селекторы, позиционирование, цвета — всё было там.&lt;/p&gt;

&lt;p&gt;Проблема монолитной спецификации в том, что для того чтобы её закончить, каждый входящий в неё элемент должен быть завершён. CSS стал сложнее, добавились новые функции.
Больше нет смысла создавать черту, которая будет останавливать работу над всеми частями CSS только для того, чтобы объявить, что очередная версия закончена. Поэтому после версии 2.1 спецификация была разделена на модули. Так как модули включали в себя все то, что было раньше, плюс добавились новые возможности — все они вышли на третий уровень. Следовательно, люди вроде меня, которые понимали CSS как единую спецификацию, называют модули третьего уровня как CSS 3.&lt;/p&gt;

&lt;p&gt;Пока мы относимся ко всему новому в CSS как к CSS 3, работающему не в полную силу, это не будет отражать реальность того, где находится CSS сейчас. Если вы читали что-то о селекторах в CSS 3, то фактически описанное является частью спецификации &lt;a href=&quot;https://www.w3.org/TR/css3-selectors/&quot;&gt;CSS Selectors Level 3&lt;/a&gt;. На самом деле CSS Selectors является одной из спецификаций, отмеченных как завершенная и рекомендуемая.
В данный момент рабочая группа по CSS работает над &lt;a href=&quot;https://drafts.csswg.org/selectors-4/&quot;&gt;Selectors Level 4&lt;/a&gt; с новыми предложенными функциями, а также возможностями которые были частью третьего уровня (а также CSS 1 и 2).
Это &lt;a href=&quot;https://www.w3.org/TR/CSS/#css-level-4&quot;&gt;не CSS 4&lt;/a&gt;, но спецификация 4-го уровня единой спецификации. Одна небольшая часть.&lt;/p&gt;

&lt;p&gt;Также есть спецификации возможностей, которые никогда не были частью CSS 1 или 2 и поэтому они относятся к первому уровню. Они являются совершенно новыми. К примеру, к первому уровню относятся спецификации &lt;a href=&quot;https://drafts.csswg.org/css-grid/&quot;&gt;CSS Grid Layout&lt;/a&gt; и &lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/&quot;&gt;Flexbox&lt;/a&gt;. Flexbox и Grid находятся в статусе Candidate Recommendation (CR).Поэтому любые новые возможности, которые предлагаются в данный момент, вероятно, в итоге попадут на следующий уровень этих спецификаций – Flexbox Level 2 и CSS Grid Level 2.&lt;/p&gt;

&lt;p&gt;Если вы хотите посмотреть состояние тех или иных возможностей и их уровень,  можете сделать это в документе &lt;a href=&quot;https://www.w3.org/Style/CSS/current-work&quot;&gt;Current Work&lt;/a&gt;. Чтобы разобраться в различных статусах, советуем обратиться &lt;a href=&quot;https://www.w3.org/2005/10/Process-20051014/tr#maturity-levels&quot;&gt;к этому документу&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Sep 2016 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/why-there-is-no-css4</link>
        <guid isPermaLink="true">http://localhost:4000/why-there-is-no-css4</guid>
      </item>
    
      <item>
        <title>Разбираемся с функциями первого класса в Sass 3.5</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Kaelig &lt;a href=&quot;https://medium.com/@kaelig/sass-first-class-functions-6e718e2b5eb0/&quot;&gt;Making sense out of Sass 3.5 first-class functions&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*K7bBVfi4k9a7wUci_nCg-w.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Озадачены последней &lt;a href=&quot;http://blog.sass-lang.com/posts/809572-sass-35-release-candidate&quot;&gt;записью в блоге Sass Release Candidate&lt;/a&gt;? Я тоже.&lt;/p&gt;

&lt;p&gt;Sass 3.5.0-RC.1 отмечен введением нового типа данных — «функций первого класса». &lt;a href=&quot;http://blog.sass-lang.com/posts/809572-sass-35-release-candidate&quot;&gt;В анонсе релиз-кандидата&lt;/a&gt; четыре длинных пункта, посвященных функциям первого класса, в которых упоминается тонна деталей, без каких-либо примеров кода. Я не очень понимаю, что это значит, поэтому решил глубже разобраться в данном вопросе…&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;Функции первого класса&lt;/h2&gt;

&lt;p&gt;В заметке про релиз-кандидат написано следующее:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Вы можете получить функцию первого класса передав ее имя
&lt;strong&gt;get-function($name)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Это значит что &lt;strong&gt;get-function($name)&lt;/strong&gt; вернет функцию первого класса.&lt;/p&gt;

&lt;p&gt;Что такое функция первого класса?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;В информатике язык программирования имеет функции первого класса, если он рассматривает функции как объекты первого класса. – &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8_%D0%BF%D0%B5%D1%80%D0%B2%D0%BE%D0%B3%D0%BE_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Звучит неплохо. Отлично, функции! Вы только что получили большое обновление.&lt;/p&gt;

&lt;p&gt;Затем, в записи упоминается:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;вы можете передать ее (функцию первого класса) в &lt;strong&gt;call()&lt;/strong&gt; в том же месте где вы передавали имя функции&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;В этом есть смысл, но по прежнему не хватает примеров. Я бы хотел получить ответ на вопрос: «Где и почему мы должны использовать &lt;strong&gt;get-function($name)&lt;/strong&gt;?”&lt;/p&gt;

&lt;p&gt;Давайте сначала посмотрим с чего мы начали.&lt;/p&gt;

&lt;h2 id=&quot;sass--35&quot;&gt;Вызов функции в Sass &amp;lt; 3.5&lt;/h2&gt;

&lt;p&gt;Два варианта:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. my-function($arguments)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Классический вызов функции. Никаких сюрпризов.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@function my-function() { @return ‘Hello, world.’; }
my-function(); // -&amp;gt; ‘Hello, world.’
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. или используя call()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Вы можете быть не знакомы с &lt;strong&gt;call&lt;/strong&gt; и это нормально. Большинству разработчиков этот вариант никогда не понадобится, так как по большей части он полезен для разработчиков библиотеки. Мы передаем имя функции &lt;strong&gt;call()&lt;/strong&gt;, который вызывает указанную функцию.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@function my-function() { @return ‘Hello, world.’; }
call(‘my-function’) // -&amp;gt; ‘Hello, world.’
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Важно: Sass 3.5 признает устаревшим этот вариант.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;В любых таблицах стилей, где имена функций передаются как строки,
нужно переключиться на использование функций первого класса. С этой целью, &lt;strong&gt;вызов call() со строкой признается устаревшим&lt;/strong&gt;. Это не вызовет серьезных ошибок вплоть до версии 4.0, но &lt;strong&gt;мы настоятельно рекомендуем пользователям перейти к использованию get-function() немедленно&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Примеры:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@function foo($x) { @return $x; }
foo('bar'); // -&amp;gt; 'bar'

// УСТАРЕЛО: ПЕРЕСТАНЕТ РАБОТАТЬ В Sass 4.0.0
call('foo', 'bar'); // -&amp;gt; 'bar'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Давайте посмотрим как работать со вторым вариантом (&lt;strong&gt;call()&lt;/strong&gt;) в Sass 3.5.0 и выше!&lt;/p&gt;

&lt;p&gt;##Вызов функции в Sass 3.5 и выше&lt;/p&gt;

&lt;p&gt;В Sass 3.5 функцию необходимо вызывать при помощи &lt;strong&gt;call()&lt;/strong&gt; передав функцию первого класса при помощи &lt;strong&gt;get-function&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. my-function($arguments)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Без паники, этот вариант еще работает.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. call(get-function(‘my-function’), $arguments)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Теперь вы передаете функцию первого класса, вместо строки.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@function foo($x) { @return $x; }

h1 {
  content: call(
    get-function('foo'),
    'It works :)'
  );
}

h2 {
  content: call(
    get-function(foo),
    '(even without quotes)'
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;call-get-function.scss&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;h1 { content: &quot;It works :)&quot;; }
h2 { content: &quot;(even without quotes)&quot;; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;output-call-get-functions.css&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. call($my-function, $arguments)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Это правда, вы можете присвоить функцию первого класса в переменную!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@​function my-function() { @​return ‘Great!’; }
$my-function: get-function(my-function); // Новое в Sass 3.5.0!
call($my-function); // -&amp;gt; Great!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@function foo($x) { @return $x; }
$foo: get-function(foo);
h1 {
  content: call($foo, 'bar');
} assign-function-to-variable.scss

h1 { content: &quot;bar&quot;; } output-assign-function-to-variable.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;К сожалению, $my-function() и $foo(‘bar’) не будут работать.
При попытке компиляции вы получите следующую ошибку:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error: get-function(“foo”) isn’t a valid CSS value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;На первый взгляд, мне показалось хорошей идеей иметь возможность писать &lt;strong&gt;$a(b)&lt;/strong&gt; в Sass, но могут быть последствия, которые мы не учли! Давайте посмотрим, что будет в следующих версиях.&lt;/p&gt;

&lt;p&gt;##Написание кода, совместимого со всеми версиями Sass&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*QqHJIgeZyYw-uezoAzR1AQ.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Авторы библиотек должны обновиться до call(get-function())&lt;/p&gt;

&lt;p&gt;Если вам необходимо поддерживать несколько версий, есть способы написания кода, который будет совместим с Sass 3.3 и выше.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Использование function-exists&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Вы можете воспользоваться &lt;strong&gt;function-exists($name)&lt;/strong&gt;, чтобы определять доступна ли get-function (в этом случае будет передаваться функция первого класса), в противном случае будет использован старый синтаксис (передача строки):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@function foo($x) { @return $x; }

h1 {
  @if (function-exists('get-function')) {
    content: call(get-function('foo'), 'Отобразится в Sass 3.5.0 и выше');
  } @else {
    content: call('foo', 'Отобразится в Sass 3.3.x и 3.4.x');
  }
}

// К сожалению, назначение функции в переменную
// не может быть полифиллом для Sass 3.3.x и 3.4.x
$foo: get-function(foo);
h1 { content: call($foo, 'bar'); }
// -&amp;gt; el { content: get-function(foo)(&quot;bar&quot;); }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;compatibility.scss&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Использование safe-get-function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Я создал утилиту под названием &lt;strong&gt;safe-get-function&lt;/strong&gt; которая работает и со старыми и с новыми версиями Sass, так что вы можете начать использовать get-function прямо сейчас и быть готовым к выходу версий 3.5 и 4.0&lt;/p&gt;

&lt;p&gt;safe-get-function() доступна в npm:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install sass-safe-get-function
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ссылка на GitHub:
&lt;a href=&quot;https://github.com/kaelig/sass-safe-get-function&quot;&gt;https://github.com/kaelig/sass-safe-get-function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##Подведем итоги&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*xmjxJl4e89aFYBGA1V8xTQ.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Моя реакция, когда я узнал о модульной системе в Sass 4.0&lt;/p&gt;

&lt;p&gt;В предстоящем релизе версии 3.5 нет ничего революционного, но я в восторге от возможностей в контексте Sass 4.0 и новой модульной системы, где не все находится в глобальной области видимости (это мажорное изменение).&lt;/p&gt;

&lt;p&gt;Если ваша библиотека или фреймворк использует call(): сейчас самое время чтобы начать работу по совместимости с Sass 3.5 и обновить ваш код сегодня, используя &lt;strong&gt;call(safe-get-function($name))&lt;/strong&gt; вместо &lt;strong&gt;call($name)&lt;/strong&gt;:
&lt;a href=&quot;https://github.com/kaelig/sass-safe-get-function&quot;&gt;https://github.com/kaelig/sass-safe-get-function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Если вы не разработчик Sass библиотеки: вероятно, эти изменения не повлияют на вас, но, надеюсь, эта статья сделала так, что будущие релизы Sass стали выглядеть менее ужасающими.&lt;/p&gt;

&lt;p&gt;Хотите поиграть с get-function? Я сделал песочницу в репозитории   &lt;a href=&quot;https://github.com/kaelig/sass-first-class-functions&quot;&gt;https://github.com/kaelig/sass-first-class-functions&lt;/a&gt;, развлекайтесь!&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;Источники&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.sass-lang.com/posts/809572-sass-35-release-candidate&quot;&gt;Sass 3.5.0 Release Candidate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sass-lang.com/documentation/Sass/Script/Functions.html#call-instance_method&quot;&gt;Documentation for call()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/First-class_function&quot;&gt;First-class functions on Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kaelig/sass-first-class-functions&quot;&gt;Download the playground on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kaelig/sass-safe-get-function&quot;&gt;safe-get-function Sass utility on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;Благодарность&lt;/h3&gt;

&lt;p&gt;Спасибо &lt;a href=&quot;https://medium.com/u/66dddc4d84eb&quot;&gt;Chris Eppstein&lt;/a&gt; за то что посмотрел и предложил использовать function-exists для обеспечения пути обновления для авторов библиотек.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Sep 2016 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/sass-first-class-functions</link>
        <guid isPermaLink="true">http://localhost:4000/sass-first-class-functions</guid>
      </item>
    
      <item>
        <title>Знакомство с debugger.html</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Bryan Clark &lt;a href=&quot;https://hacks.mozilla.org/2016/09/introducing-debugger-html/&quot;&gt;Introducing debugger.html&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;debugger.html — современный JavaScript отладчик от Mozilla, сделанный на &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; и &lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux&lt;/a&gt;. Проект начался в начале этого года в попытке заменить &lt;a href=&quot;https://developer.mozilla.org/en/docs/Tools&quot;&gt;Firefox Developer Tools&lt;/a&gt;. Помимо этого мы хотели сделать отладчик с возможностью отладки нескольких целей и функционирования в стандартном режиме.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/09/colla.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В данный момент debugger.html можно подключить к Firefox, а так же в экспериментальном режиме связать с Chrome и Node.  Отладчик подключается при помощи Mozilla’s &lt;a href=&quot;https://wiki.mozilla.org/Remote_Debugging_Protocol&quot;&gt;Remote Debug Protocol&lt;/a&gt; (RDP) и взаимодействует с Node и Chrome используя &lt;a href=&quot;https://developer.chrome.com/devtools/docs/debugger-protocol&quot;&gt;Chrome’s RDP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Проект debugger.html размещен на &lt;a href=&quot;https://github.com/devtools-html/debugger.html&quot;&gt;GitHub&lt;/a&gt; и использует современные фреймворки и наборы инструментов, что делает его доступным и привлекательным для широкой аудитории разработчиков.&lt;/p&gt;

&lt;p&gt;##debugger.html
Пользовательский интерфейс разделён на три области: панель исходников, панель редактирования и правый сайдбар.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Панель исходников&lt;/em&gt; показывает дерево всех исходников для отлаживаемого в данный момент приложения.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Панель редактирования&lt;/em&gt; используется для отображения содержимого файлов исходников, установки брейкпоинтов и улучшения форматирования исходников.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Правый сайдбар&lt;/em&gt; текущие установленные брейкпоинт, текущий вызов стека и области видимости переменных, когда отладчик находится в паузе
    &lt;ul&gt;
      &lt;li&gt;Отладчик поддерживает паузу, step over, step in, step out и запуск функций для отладки вашего JavaScript.&lt;/li&gt;
      &lt;li&gt;Панель вызова стека отображает фреймы &lt;em&gt;вызова стека&lt;/em&gt; для состояний в паузе, а &lt;em&gt;панель областей видимости&lt;/em&gt; показывает раскрываемое дерево переменных на основе выбранного фрейма.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/09/debug.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##Приступая к работе&lt;/p&gt;

&lt;p&gt;Прежде чем приступить к работе с отладчиком вы должны получить код с GitHub и посмотреть &lt;a href=&quot;https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#getting-started&quot;&gt;руководство к началу работы&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Если вы хотите сразу приступить к работе, выполните следующие команды:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install - установите зависимости
npm start - запустите сервер разработки
open http://localhost:8000 - откройте в любом современном браузере
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;После того как вы открыли отладчик в браузере главная страница отладчика будет отображать список целей для отладки, которые мы можете выбрать. Для того чтобы подключить отладчик и начать работу, цель должна быть запущена с возможностью удаленной отладки. Обычно это требует установки нескольких флагов. Например, если вы хотите запустить Firefox на MacOS вы должен включить отладку с помощью следующей команды.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /Applications/Firefox.app/Contents/MacOS/firefox-bin –start-**debugger**-server 6080 -P development
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Другие опции для Chrome и Firefox вы можете найти &lt;a href=&quot;https://github.com/devtools-html/debugger.html/blob/master/docs/remotely-debuggable-browsers.md#&quot;&gt;здесь&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Отладка Node требует наличия у вас версии &lt;a href=&quot;https://nodejs.org/en/blog/release/v6.3.0/&quot;&gt;6.3.0&lt;/a&gt; или выше. Node вы должны запускать со специальным флагом. Например, если вы хотите отлаживать &lt;code class=&quot;highlighter-rouge&quot;&gt;myserver.js&lt;/code&gt; вы должны использовать следующую команду.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ node –inspect myserver.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Больше информации вы можете получить &lt;a href=&quot;https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#getting-started&quot;&gt;в руководстве к началу работы&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;firefox-developer-tools&quot;&gt;Firefox Developer Tools&lt;/h2&gt;
&lt;p&gt;Мы интегрируем отладчик в Developer Tools для Firefox. Первая итерация закончена и включена в ночную сборку. Вы можете попробовать отладчик там.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2016/09/jsfiddle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##Примите участие&lt;/p&gt;

&lt;p&gt;Как уже упоминалось выше, проект находится в разработке, мы будем благодарны за вашу помощь в создании, возможно, лучшего отладчика. Если вы хотите присоединиться к нам, пожалуйста, ознакомьтесь с &lt;a href=&quot;https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md&quot;&gt;руководством контрибьютера&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Sep 2016 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/introducing-debugger-html</link>
        <guid isPermaLink="true">http://localhost:4000/introducing-debugger-html</guid>
      </item>
    
      <item>
        <title>Первое десктопное приложение на HTML, JS и Electron</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Danny Markov &lt;a href=&quot;http://tutorialzine.com/2015/12/creating-your-first-desktop-app-with-html-js-and-electron/&quot;&gt;Creating Your First Desktop App With HTML, JS and Electron&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Материал вычитывал: &lt;i&gt;Михаил Синяков&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/creating-your-first-with-electron.jpg&quot; class=&quot;main-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Веб-приложения становятся все более мощными с каждым годом, но остается еще место для классических приложений, обладающих полным доступом к оборудованию компьютера. Сегодня вы можете создать десктопное приложения при помощи хорошо знакомых вам HTML, JS и Node.js, упаковать его в исполняемый файл и пользоваться им на Windows, OS X и Linux.&lt;/p&gt;

&lt;p&gt;Существуют два самых популярных проекта с открытым исходным кодом, позволяющих сделать это. Это &lt;a href=&quot;http://nwjs.io/&quot;&gt;NW.js&lt;/a&gt; и &lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt;, последний мы и будем рассматривать сегодня. Мы собираемся переписать версию, &lt;a href=&quot;http://tutorialzine.com/2015/01/your-first-node-webkit-app/&quot;&gt;которую делали на NW.js&lt;/a&gt;, так что вы сможете еще и сравнить их между собой.&lt;/p&gt;

&lt;h2 id=&quot;electron&quot;&gt;Начинаем работу с Electron&lt;/h2&gt;

&lt;p&gt;Программы, которые создаются при помощи Electron это просто веб сайты, которые открываются во встроенном браузере Chromium. В дополнение к стандартным API HTML5 эти сайты могут использовать полный набор модулей Node.js и специальных модулей Electron, которые позволяют получить доступ к операционной системе.&lt;/p&gt;

&lt;p&gt;В этом уроке мы создадим простое приложение, которое получает последние статьи с сайта Tutorialzine через RSS и отображает их в виде карусели. Все исходники, вы можете &lt;a href=&quot;http://demo.tutorialzine.com/2015/12/creating-your-first-desktop-app-with-html-js-and-electron/creating-your-first-desktop-app-with-electron.zip&quot;&gt;скачать архивом по ссылке&lt;/a&gt;.
Распакуйте его содержимое в любую директорию на вашем компьютере.&lt;/p&gt;

&lt;p&gt;Глядя на структуру файлов вы никогда бы не догадались что это десктопное приложение, а не просто веб сайт.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/electron-app-tree.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Мы рассмотрим наиболее интересные файлы и то как они работают минутой позже, а пока давайте заглянем под капот.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;Запуск приложения&lt;/h2&gt;

&lt;p&gt;Поскольку приложение Electron это просто Node.js приложение, вам нужно установить &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;. Сделать это довольно просто.&lt;/p&gt;

&lt;p&gt;Откройте терминал и выполните в директории проекта следующую команду:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Это создаст папку &lt;strong&gt;node_modules&lt;/strong&gt;, содержащую все необходимые зависимости для приложения. Затем, введите в терминале следующее:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Приложение должно открыться в новом окне, обратите внимание, что оно имеет только верхнее меню и больше ничего.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/electron_app_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Вы наверное обратили внимание,что приложение запускается не слишком удобно для пользователя. Однако это просто способ для разработчика запустить приложение. Когда оно будет упаковано, пользователь будет запускать его как обычно — двойным кликом по иконке.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;Как это сделано&lt;/h2&gt;

&lt;p&gt;Сейчас мы поговорим о наиболее важных файлах, которые используются в любом приложении, написанном при помощи Electron. Давайте начнем с файла package.json, который содержит различную информацию о проекте. Например, версию, список npm зависимостей и другую не менее важную информацию.&lt;/p&gt;

&lt;h3 id=&quot;packagejson&quot;&gt;package.json&lt;/h3&gt;

&lt;pre&gt;
&lt;code class=&quot;json&quot;&gt;
{
  &quot;name&quot;: &quot;electron-app&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;main.js&quot;,
  &quot;dependencies&quot;: {
    &quot;pretty-bytes&quot;: &quot;^2.0.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;electron-prebuilt&quot;: &quot;^0.35.2&quot;
  },
  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;electron main.js&quot;
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Если вы уже работали с Node.js, то у вас уже имеется представление как это все работает. Важно отметить команду &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; которая запускает приложение. Когда мы вызываем эту команду в консоли, то просим electron запустить файл &lt;strong&gt;main.js&lt;/strong&gt;. Этот файл содержит маленький скрипт, который открывает окно приложения, определяет некоторые параметры и обработчики событий.&lt;/p&gt;

&lt;h3 id=&quot;mainjs&quot;&gt;main.js&lt;/h3&gt;

&lt;pre&gt;
&lt;code class=&quot;js&quot;&gt;
var app = require('app');  // Модуль управления приложением.
var BrowserWindow = require('browser-window');  // Модуль для создания окна браузера.

// Сохраняем глобальную ссылку на объект Window, если этого не сделать
// окно закроется автоматически как только сработает сборщик мусора JS.
var mainWindow = null;

// Выйти, после того как все окна будут закрыты.
app.on('window-all-closed', function() {
    // В OS X это характерно для приложений и их меню,
    // чтобы оставаться активными, пока пользователь явно не завершит работу 
    // при помощи Cmd + Q
    if (process.platform != 'darwin') {
        app.quit();
    }
});

// Этот метод будет вызван когда Electron закончил
// инициализацию и готов к созданию окна браузера.
app.on('ready', function() {
    // Создаем окно браузера.
    mainWindow = new BrowserWindow({width: 900, height: 600});

    // и загружаем index.html в приложение.
    mainWindow.loadURL('file://' + __dirname + '/index.html');

    // Генерируется когда окно закрыто.
    mainWindow.on('closed', function() {
        // Сброс объекта окна, обычно нужен когда вы храните окна
        // в массиве, это нужно если в вашем приложении множество окон, 
        // в таком случае вы должны удалить соответствующий элемент.
        mainWindow = null;
    });
});
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Давайте взглянем на то, что мы делаем в методе &lt;code class=&quot;highlighter-rouge&quot;&gt;ready&lt;/code&gt;. Сначала мы определяем окно браузера и устанавливаем его первоначальный размер. Затем мы загружаем в него файл &lt;strong&gt;index.html&lt;/strong&gt;, который работает точно так же, как если бы мы открыли его в браузере.&lt;/p&gt;

&lt;p&gt;Как вы видите, в самом файле нет ничего особенного — контейнер для карусели и пункты для отображения статистики использования процессора и оперативной памяти.&lt;/p&gt;

&lt;h3 id=&quot;indexhtml&quot;&gt;index.html&lt;/h3&gt;

&lt;pre&gt;
&lt;code class=&quot;html&quot;&gt;
&amp;lt;!DOCTYPE html&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;br /&gt;    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;title&amp;gt;Tutorialzine Electron Experiment&amp;lt;/title&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./css/jquery.flipster.min.css&amp;quot;&amp;gt;&lt;br /&gt;    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./css/styles.css&amp;quot;&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;div class=&amp;quot;flipster&amp;quot;&amp;gt;&lt;br /&gt;    &amp;lt;ul&amp;gt;&lt;br /&gt;    &amp;lt;/ul&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;p class=&amp;quot;stats&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;!-- Правильный способ подключить jQuery в Electron приложении --&amp;gt;&lt;br /&gt;&amp;lt;script&amp;gt;window.$ = window.jQuery = require(&amp;#39;./js/jquery.min.js&amp;#39;);&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;script src=&amp;quot;./js/jquery.flipster.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;script src=&amp;quot;./js/script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Здесь у нас html-код, ссылки на необходимые стили, js библиотеки и скрипты. Заметили что jQuery подключен странным способом? См. этот &lt;a href=&quot;http://stackoverflow.com/questions/32621988/electron-jquery-is-not-defined&quot;&gt;issue&lt;/a&gt;, чтобы узнать почему подключение происходит именно так.&lt;/p&gt;

&lt;p&gt;Наконец, собственно сам JavaScript код нашего приложения. В нем мы подключаемся к RSS ленте, получаем последние статьи и показываем их. Если мы попытаемся провернуть такую операцию в окружении браузера, то ничего не получится. Канал находится  на другом домене и получение данных с него запрещено. Однако в Electron такого ограничения нет, мы можем получить необходимую информацию при помощи AJAX-запроса.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;js&quot;&gt;
$(function(){

    // Отображаем информацию о компьютере используя node-модуль os.

    var os = require('os');
    var prettyBytes = require('pretty-bytes');

    $('.stats').append('Number of cpu cores: &amp;lt;span&amp;gt;' + os.cpus().length + '&amp;lt;/span&amp;gt;');
    $('.stats').append('Free memory: &amp;lt;span&amp;gt;' + prettyBytes(os.freemem())+ '&amp;lt;/span&amp;gt;');

    // Библиотека UI компонентов Electron. Понадобится нам позже.

    var shell = require('shell');


    // Получаем последние записи с Tutorialzine.

    var ul = $('.flipster ul');

    // Политики безопасности в Electron не применяются, поэтому
    // мы можем отправлять ajax-запросы на другие сайты. Обратимся к Tutorialzine

    $.get('http://feeds.feedburner.com/Tutorialzine', function(response){

        var rss = $(response);

        // Найдем все статьи в RSS потоке:

        rss.find('item').each(function(){
            var item = $(this);

            var content = item.find('encoded').html().split('&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;')[0]+'&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;';
            var urlRegex = /(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;amp;:/~\+#]*[\w\-\@?^=%&amp;amp;/~\+#])?/g;

            // Получим первое изображение из статьи.
            var imageSource = content.match(urlRegex)[1];


            // Создадим li для каждой статьи и добавим в неупорядоченный список.

            var li = $('&amp;lt;li&amp;gt;&amp;lt;img /&amp;gt;&amp;lt;a target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;');

            li.find('a')
                .attr('href', item.find('link').text())
                .text(item.find(&quot;title&quot;).text());

            li.find('img').attr('src', imageSource);

            li.appendTo(ul);

        });

        // Инициализируем плагин flipster.

        $('.flipster').flipster({
            style: 'carousel'
        });

        // При клике на статью откроем страницу в браузере по умолчанию.
        // В противном случае откроем ее в окне Electron.

        $('.flipster').on('click', 'a', function (e) {

            e.preventDefault();

            // Откроем URL в браузере по умолчанию.

            shell.openExternal(e.target.href);

        });

    });

});
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Есть одна классная вещь, в приведенном выше коде, она заключается в том, что в одном файле можно одновременно использовать:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript библиотеки — jQuery и &lt;a href=&quot;https://github.com/drien/jquery-flipster&quot;&gt;jQuery Flipster&lt;/a&gt; для создания карусели.&lt;/li&gt;
  &lt;li&gt;Собственный модули Electron  — оболочку, которая предоставляет API для desktop-задач. В нашем случае открытие url в браузере по умолчанию.&lt;/li&gt;
  &lt;li&gt;Node.js модули — Модуль &lt;a href=&quot;https://nodejs.org/api/os.html&quot;&gt;OS&lt;/a&gt; для доступа к информации о системе, &lt;a href=&quot;https://www.npmjs.com/package/pretty-bytes&quot;&gt;Pretty Bytes&lt;/a&gt; для форматирования.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;С их помощью наше приложение готово к работе!&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;Упаковка и дистрибуция.&lt;/h2&gt;

&lt;p&gt;Есть еще одна важная вещь, которую нужно сделать чтобы ваше приложение попало к конечному пользователю. Вы должны упаковать его в исполняемый файл, который будут запускать двойным щелчком. Необходимо будет собрать отдельный дистрибутив для каждой из систем: Windows, OS X, Linux. В этом нам поможет &lt;a href=&quot;https://github.com/maxogden/electron-packager&quot;&gt;Electron Packager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Вы должны принять во внимание тот факт, что в упакованный файл попадут все ваши ресурсы, все зависимости node.js, а так же уменьшенная копия браузера webkit. В конечном итоге получится файл порядка 50mb. Это довольно много и не практично для простых приложений, как, например, наше, но этот вопрос становится не актуальным, когда речь идет о больших и сложных приложениях.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;Заключение&lt;/h2&gt;

&lt;p&gt;Единственное серьезное отличие от NW.js состоит в том, что в NW.js точкой входа выступает HTML-файл, в то время как в Electron эту роль выполняет JavaScript файл. C Electron вы получаете больше контроля. Вы легко можете построить мульти оконное приложение и организовать обмен данными между ними.&lt;/p&gt;

&lt;p&gt;Вот что можно еще почитать по теме:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md&quot;&gt;Electron’s Quick Start Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/atom/electron/tree/master/docs&quot;&gt;Electron’s Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://electron.atom.io/#built-on-electron&quot;&gt;Apps Built with Electron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Jun 2016 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/2016/06/13/creating-your-first-desktop-app-with-electron.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/13/creating-your-first-desktop-app-with-electron.html</guid>
      </item>
    
      <item>
        <title>Макет «Святой Грааль» при помощи CSS Grid</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Ire Aderinokun &lt;a href=&quot;https://bitsofco.de/holy-grail-layout-css-grid/&quot;&gt;The Holy Grail Layout with CSS Grid&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Материал вычитывал: &lt;i&gt;Михаил Синяков&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/holy-grail-css-grid.jpg&quot; class=&quot;main-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Хотя &lt;a href=&quot;https://drafts.csswg.org/css-grid/&quot;&gt;CSS Grid Layout Module&lt;/a&gt; пока еще находится в статусе редакторского черновика, но завершение уже близко. &lt;a href=&quot;http://igalia.github.io/css-grid-layout/enable.html&quot;&gt;Мы можем включить модуль&lt;/a&gt; в некоторых браузерах для тестирования и выяснить, какие ошибки реализация имеет на данный момент.&lt;/p&gt;

&lt;p&gt;CSS Grid Layout реально сложен, даже больше, чем Flexbox. Он имеет 17 новых свойств и вводит множество новых концепций на всем пути написания CSS. В попытке понять новую спецификацию, я использовала модуль для создания макета «Святой Грааль».&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;Что такое макет «Святой Грааль»?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Holy_Grail_%28web_design%29&quot;&gt;Святой Грааль&lt;/a&gt; это макет, который состоит из четырех разделов — header, footer, основное содержимое и две боковых колонки, по одной с каждой стороны. Макет так же придерживается следующих правил:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;«Плавающая» ширина центральной части&lt;/strong&gt; и &lt;strong&gt;фиксированная ширина сайдбаров&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Центральная часть &lt;strong&gt;в разметке должна идти раньше&lt;/strong&gt;, чем два сайдбара (но после header’а)&lt;/li&gt;
  &lt;li&gt;Все три колонки должны быть &lt;strong&gt;одинаковой высоты&lt;/strong&gt;, вне зависимости от содержимого&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Футер должен быть всегда прижат к низу&lt;/strong&gt;, даже если контент не заполняет вьюпорт&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Макет должен быть отзывчивым&lt;/strong&gt;, все разделы должны схлопываться в один столбец на маленьких экранах&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Сделать такое при помощи обычного CSS без хаков довольно сложно.&lt;/p&gt;

&lt;h2 id=&quot;css-grid&quot;&gt;Решение с использованием CSS Grid&lt;/h2&gt;

&lt;p&gt;Вот такое решение я придумала используя CSS Grid. Во-первых, разметка:&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;html&quot;&gt;
&amp;lt;body class=&amp;quot;hg&amp;quot;&amp;gt;  &lt;br /&gt;  &amp;lt;header class=&amp;quot;hg__header&amp;quot;&amp;gt;Title&amp;lt;/header&amp;gt;&lt;br /&gt;  &amp;lt;main class=&amp;quot;hg__main&amp;quot;&amp;gt;Content&amp;lt;/main&amp;gt;&lt;br /&gt;  &amp;lt;aside class=&amp;quot;hg__left&amp;quot;&amp;gt;Menu&amp;lt;/aside&amp;gt;&lt;br /&gt;  &amp;lt;aside class=&amp;quot;hg__right&amp;quot;&amp;gt;Ads&amp;lt;/aside&amp;gt;&lt;br /&gt;  &amp;lt;footer class=&amp;quot;hg__footer&amp;quot;&amp;gt;Footer&amp;lt;/footer&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;И CSS, всего 31 строка!&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
.hg__header { grid-area: header; }
.hg__footer { grid-area: footer; }
.hg__main { grid-area: main; }
.hg__left { grid-area: navigation; }
.hg__right { grid-area: ads; }

.hg {
    display: grid;
    grid-template-areas: &quot;header header header&quot;
                         &quot;navigation main ads&quot;
                         &quot;footer footer footer&quot;;
    grid-template-columns: 150px 1fr 150px;
    grid-template-rows: 100px 
                        1fr
                        30px;
    min-height: 100vh;
}

@media screen and (max-width: 600px) {
    .hg {
        grid-template-areas: &quot;header&quot;
                             &quot;navigation&quot;
                             &quot;main&quot;
                             &quot;ads&quot;
                             &quot;footer&quot;;
        grid-template-columns: 100%;
        grid-template-rows: 100px 
                            50px 
                            1fr
                            50px 
                            30px;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/Holy_Grail_CSS_Grid.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;Разбор&lt;/h2&gt;

&lt;p&gt;Как я уже упоминала, макет сделанный при помощи CSS Grid может быть очень сложным. Однако для создания этого макета я использовала только 4 из 17 новых свойств.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-rows&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Мое решение, по созданию макета «Святой Грааль» при помощи CSS Grid можно разбить на пять шагов.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1. Определение сетки&lt;/h3&gt;

&lt;p&gt;Первое, что мы хотим сделать, это определить области сетки, к которым мы можем обратиться через псевдоним. Делается это при помощи свойства &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
.hg__header { grid-area: header; }
.hg__footer { grid-area: footer; }
.hg__main { grid-area: main; }
.hg__left { grid-area: navigation; }
.hg__right { grid-area: ads; }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Затем, используя свойство &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; мы можем расположить элементы на сетке интуитивным и визуальным способом. Свойство &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; принимает список из строк разделенных пробелами. Каждая строчка представляет собой ряд. В каждой строке, у нас есть список областей сетки разделенных пробелами. Каждая область сетки занимает один столбец. Так что, если мы хотим, чтобы область охватила два столбца мы определяем ее дважды.&lt;/p&gt;

&lt;p&gt;В макете «Святой Грааль» у нас есть 3 столбца и 3 ряда. Header и footer занимают 3 колонки, в то время как другие области охватывают по 1 колонке каждый.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
.hg {
    display: grid;
    grid-template-areas: &quot;header header header&quot;
                         &quot;navigation main ads&quot;
                         &quot;footer footer footer&quot;;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;С помощью этой разметки мы получим следующий результат.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/step-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2. Определение ширины столбцов&lt;/h3&gt;

&lt;p&gt;Далее, мы хотим определить ширину столбцов. Она определяется при помощи свойства &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt;. Это свойство принимает разделенный пробелами список. Поскольку у нас 3 колонки, то и ширину мы определяем 3 раза.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
grid-template-columns: [column 1 width]  [column 2 width]  [column 3 width];
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;В макете «Святой Грааль» мы хотим видеть 2 сайдбара по 150 пикселей каждый.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
.hg {
  grid-template-columns: 150px  [column 2 width] 150px;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Также мы хотим, чтобы средний столбец занимал оставшуюся часть пространства. Мы можем сделать это при помощи новой единицы измерения &lt;code class=&quot;highlighter-rouge&quot;&gt;fr&lt;/code&gt;. Она обозначает долю свободного пространства в сетке. В нашем случае добавляется еще и ширина сайдбаров, в сумме 300px.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
.hg {
    grid-template-columns: 150px 1fr 150px;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Сейчас наш макет выглядит следующим образом.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/step-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;3. Определение высоты рядов&lt;/h3&gt;

&lt;p&gt;Теперь нам нужно определить высоту рядов. Подобно тому, как мы определяем ширину столбцов при помощи &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt;, мы определяем высоту при помощи &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-rows&lt;/code&gt;. Это свойство принимает разделенный пробелами список содержащий высоту для каждого ряда в нашей сетке. Хотя мы можем записать его на одной строке, я думаю, лучше и визуально более понятно, будет написать по одному ряду в строку.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
.hg {
    grid-template-rows: 100px 
                        1fr
                        30px;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Таким образом, высота header будет равняться 100px, высота footer 30, а средний ряд (основное содержимое и две боковые панели) займет оставшуюся свободную часть.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/step-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;footer&quot;&gt;4. Прижатый footer&lt;/h3&gt;

&lt;p&gt;В данном макете мы хотим, чтобы футер всегда находился в нижней части экрана, даже если содержимого на странице мало. Для этого установим минимальную высоту элемента &lt;code class=&quot;highlighter-rouge&quot;&gt;.hg&lt;/code&gt; равной высоте вьюпорта.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
.hg {
    min-height: 100vh;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Поскольку мы указали, что средний ряд должен занимать оставшуюся часть свободного пространства он растягивается и заполняет экран.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/step-4-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;5. Делаем макет отзывчивым&lt;/h3&gt;

&lt;p&gt;И, наконец, мы хотим сделать макет отзывчивым. На небольших устройствах все элементы сетки должны отображаться в одном столбце, один за другим. Для этого нам необходимо переопределить 3 свойства, которые мы определили ранее &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-rows&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Во-первых, мы хотим чтобы все элементы в сетке были в одном столбце в определенном порядке.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
@media screen and (max-width: 600px) {
    .hg {
        grid-template-areas: &quot;header&quot;
                             &quot;navigation&quot;
                             &quot;main&quot;
                             &quot;ads&quot;
                             &quot;footer&quot;;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Далее, мы хотим чтобы все элементы растянулись на всю ширину сетки.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
@media screen and (max-width: 600px) {
    .hg {
        grid-template-columns: 100%;
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;И наконец, нам нужно сбросить высоту для каждой из строк. Все строки, кроме основного ряда, имеют определенную высоту.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;css&quot;&gt;
@media screen and (max-width: 600px) {
    .hg {
        grid-template-rows: 100px /* Header */
                            50px /* Navigation */
                            1fr /* Main Content */
                            50px /* Ads */
                            30px; /* Footer */
    }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/images/step-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Вот и все! Вы можете посмотреть &lt;a href=&quot;http://ireade.github.io/holy-grail-css-grid/&quot;&gt;демо по этой ссылке&lt;/a&gt;, а так же &lt;a href=&quot;https://github.com/ireade/holy-grail-css-grid&quot;&gt;исходники&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;Поддержка браузерами&lt;/h2&gt;

&lt;iframe src=&quot;//caniuse.bitsofco.de/embed/index.html?feat=css-grid&amp;amp;periods=future_2,future_1,current&quot; frameborder=&quot;0&quot; width=&quot;100%&quot; height=&quot;561px&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;section-7&quot;&gt;Материалы по теме&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=xQn0G_bxNa4&quot;&gt;Можно вообще всё Раскладка по гриду - Вадим Макеев, MoscowJS 30&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css-live.ru/css/zolotaya-rybka-css3-grid-layout.html&quot;&gt;Золотая рыбка CSS3 Grid Layout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css-live.ru/articles/podrobno-o-razmeshhenii-elementov-v-grid-raskladke-css-grid-layout.html&quot;&gt;Подробно о размещении элементов в грид-раскладке (CSS Grid Layout)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://css-live.ru/articles/mysli-vslux-o-podsetkax-v-css-grid-layout.html&quot;&gt;Мысли вслух о подсетках в CSS Grid Layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/2016/06/05/css-grid-holy-grail.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/05/css-grid-holy-grail.html</guid>
      </item>
    
      <item>
        <title>$(document).ready vs $(window).load vs window.onload</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;RITURAJ RATAN &lt;a href=&quot;http://tech-blog.maddyzone.com/javascript/document-ready-vs-window-load-vs-window-onload&quot;&gt;$(document).ready vs $(window).load vs window.onload&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/load-events.png&quot; class=&quot;main-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##$(document).ready&lt;/p&gt;

&lt;p&gt;Длительное время мы использовали &lt;code class=&quot;highlighter-rouge&quot;&gt;'$(document).ready'&lt;/code&gt; работая с jQuery. Написанный таким образом код начнёт выполняться сразу после того, как будет готов DOM, за исключением картинок. Указанный код будет выполняться непосредственно после готовности DOM, не дожидаясь полной загрузки изображений. Вызов &lt;code class=&quot;highlighter-rouge&quot;&gt;$(document).ready&lt;/code&gt; несколько раз приведет к последовательному исполнению вызовов друг за другом. Существуют ещё несколько вариантов записи.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;javascript&quot;&gt;
//Вариант 1
$(document).ready(function() {
/** начнёт работу тогда, когда будет готов DOM, за исключением картинок **/
// ваш код
});

//Вариант 2
$(function() {
/** начнёт работу тогда, когда будет готов DOM, за исключением картинок **/
//ваш код
});

//Вариант 3
$(document).on('ready', function(){
/** начнёт работу тогда, когда будет готов DOM, за исключением картинок **/
//ваш код
});

//Вариант 4
jQuery(document).ready(function(){
/** начнёт работу тогда, когда будет готов DOM, за исключением картинок **/
//ваш код
});
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;##$(window).load&lt;/p&gt;

&lt;p&gt;Если мы говорим о &lt;code class=&quot;highlighter-rouge&quot;&gt;$(window).load&lt;/code&gt; то код, написанный внутри такой конструкции, начнёт работу когда будет готов весь DOM включая изображения. Такой вызов подойдёт если мы хотим работать с изображениями (расчёт размеров изображения). Данный вызов, как и предыдущий является jQuery событием. Если на нашей странице есть изображения, то сначала мы дождёмся загрузки их всех, а потом будет вызван код.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;javascript&quot;&gt;
$(window).load(function() {
/** код будет запущен когда страница будет полностью загружена, включая все фреймы, объекты и изображения **/
});
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;И ещё кое-что, не путайте событие window load с jQuery методом ajax load.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;javascript&quot;&gt;
// ajax метод загрузки в jQuery
$(&quot;#elementid&quot;).load( &quot;data.html&quot; );
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;##window.onload&lt;/p&gt;

&lt;p&gt;Событие onload является стандартным событием в DOM, а описанные выше решения работают только при наличии библиотеки jQuery. Данный вариант имеет такую же функциональность как &lt;code class=&quot;highlighter-rouge&quot;&gt;$(window).load&lt;/code&gt;, но является встроенным JavaScript событием. Событие onload происходит, когда объект был загружен. Мы можем сделать такой вызов непосредственно из тега. Например, разместив его в теге изображения и как только оно будет загружено произойдёт вызов события.&lt;/p&gt;

&lt;p&gt;Такой вызов возможен как в HTML так и в JS.&lt;/p&gt;

&lt;p&gt;В HTML&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;html&quot;&gt;
&amp;lt;element onload=&amp;quot;myFunction&amp;quot;&amp;gt;&amp;lt;/element&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;В JS&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;javascript&quot;&gt;
object.onload=function(){/**ваш код**/};// объектом здесь может быть window, body и т.д.
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Alert “вызов после загрузки body” будет вызван сразу после того как загрузится body&lt;/p&gt;

&lt;p&gt;В HTML&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;html&quot;&gt;
&amp;lt;!-- после загрузки body будет вызвана myFunction --&amp;gt;&lt;br /&gt;&amp;lt;body onload=&amp;quot;myFunction()&amp;quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;В JavaScript&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;javascript&quot;&gt;
// myFunction() будет вызвана после body load
function myFunction(){
alert(&quot;вызов после загрузки body&quot;);
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Если рассмотреть пример работы onload после загрузки изображения, то выглядеть все будет как показано ниже&lt;/p&gt;

&lt;p&gt;В HTML&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;html&quot;&gt;
&amp;lt;!--после загрузки изображения будет вызвана myImageFunction() --&amp;gt;&lt;br /&gt;&amp;lt;img src=&amp;quot;image path src&amp;quot; onload=&amp;quot;myImageFunction()&amp;quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;В JavaScript&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;javascript&quot;&gt;
// myFunction() будет вызвана после загрузки изображения
function myImageFunction(){
alert(&quot;вызов после загрузки изображения&quot;);
}
&lt;/code&gt;
&lt;/pre&gt;
</description>
        <pubDate>Fri, 12 Feb 2016 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/2016/02/12/load-events.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/02/12/load-events.html</guid>
      </item>
    
      <item>
        <title>Новое в DevTools</title>
        <description>&lt;p&gt;&lt;i&gt;Данный материал является вольным переводом статьи: &lt;br /&gt;Paul Bakaus &lt;a href=&quot;https://developers.google.com/web/updates/2015/10/devtools-digest-efficient-element-edits&quot;&gt;DevTools Digest: Efficient element edits, Service Worker debugging, and Material Design shades
&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/devtools.png&quot; class=&quot;main-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Используйте новое контекстное меню в панели DOM для эффективного редактирования узлов. Осуществляйте отладку services workers при помощи панели ресурсов. Выбирайте один из оттенков в стиле Material Design в компоненте colorpicker. Работайте с Blackbox JS проще.&lt;/p&gt;

&lt;p&gt;##Улучшенное контекстное меню панели DOM.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://developers.google.com/web/updates/images/2015/10/devtools-dom-menu.png&quot; style=&quot;float: left;max-width: 230px;margin-right: 1em;margin-bottom: 1em;width: 40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Мы проанализировали наиболее часто совершаемые действия в панели DOM и пришли к выводу, что контекстное меню не должно быть загроможденным и должно быть реорганизовано. Теперь намного проще выполнять такие операции как: скрыть или удалить элемент, сделать его состояние :active или :hover или начать редактирование HTML. И если при работе с трекпадом вы не хотите заморачиваться с “правой кнопкой мыши” нажмите на три маленькие точки рядом с выбранным элементом.&lt;/p&gt;

&lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Отладка Service Workers в панели ресурсов&lt;/p&gt;

&lt;p&gt;Service Workers это просто фантастика, особенно после того, как вы получили возможность их настроить. Но они могут каверзно вскружить вам голову, особенно поначалу. Еще хуже был тот факт, что их отладка требовала открытия новой вкладки с адресом chrome://serviceworker-internals/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://developers.google.com/web/updates/images/2015/10/devtools-service-workers.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Хватит это терпеть! Теперь можно отлаживать Service Workers для текущего домена непосредственно в панели ресурсов. Работа над данной возможностью еще продолжается, но она претерпела значительные улучшения по сравнению с предыдущей версией.&lt;/p&gt;

&lt;p&gt;##Все цвета: Оттенки Material Design в colorpicker&lt;/p&gt;

&lt;p&gt;Несколько недель назад мы добавили палитру Material Design в colorpicker, чтобы дать вам возможность использовать основные цвета “из коробки”. На деле для создания полной страницы вам неизбежно понадобится доступ ко всем оттенкам Material Design, поэтому мы добавили их.&lt;/p&gt;

&lt;video src=&quot;https://developers.google.com/web/updates/videos/2015/10/devtools-md-shades.mp4&quot; controls=&quot;&quot; loop=&quot;&quot; autoplay=&quot;&quot;&gt;&lt;/video&gt;

&lt;p&gt;Для доступа к оттенкам сделайте “долгий клик” на один из первичных цветов и выберите оттенок вместо него.&lt;/p&gt;

&lt;p&gt;##Легкая настройка Blackbox JavaScript библиотек&lt;/p&gt;

&lt;p&gt;JavaScript Blackboxing был совсем рядом, но его не очень-то легко было обнаружить. Эта функция позволяет исполнять blackbox сценарий на странице, чтобы вы могли сосредоточиться только на авторском коде (и скрыть код оболочек).&lt;/p&gt;

&lt;p&gt;Сейчас мы переместили ее в настройки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://developers.google.com/web/updates/images/2015/10/devtools-blackboxing.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##Лучшее из Rest&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Отсутствует доступ к переключению рендеринга? Рендеринг настройки были перенесены в главное меню в DevTools ( в раздел “More Tools”). В дополнение к обычным инспекторам (наподобие FPS-метра) мы отправили туда же режим “Эмуляция печатного издания”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Надоело вводить chrome://inspect в Omnibox? Inspect Devices вы можете теперь найти в новом главном меню в разделе “More Tools”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Случайно закрыли одну из вкладок вроде рендеринга или поиска? Теперь вы можете открыть их снова при помощи нового левого меню.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;UPD:&lt;/strong&gt; Большое спасибо &lt;a href=&quot;https://twitter.com/pepelsbey&quot;&gt;Вадиму Макееву&lt;/a&gt; за замечание о переводе абзаца про Blackbox и объяснение ошибки.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Все фото и видео материалы взяты с сайта &lt;a href=&quot;https://developers.google.com/web/updates/2015/10/devtools-digest-efficient-element-edits&quot;&gt;developers.google.com&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Nov 2015 00:00:00 +0400</pubDate>
        <link>http://localhost:4000/2015/11/05/new-in-devtools.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/11/05/new-in-devtools.html</guid>
      </item>
    
  </channel>
</rss>
